esphome:
  name: battery-indicator
  friendly_name: battery-indicator
  on_boot:
    priority: 600
    then:
      - light.turn_on:
          id: batsoclight
          brightness: 40%
          effect: "Battery SOC"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

ota:
  password: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Battery Indicator Fallback Hotspot"
    password: "xxxxxxxxxxxxxxxxxxxx"

captive_portal:

time:
  - platform: homeassistant
    id: local_time

text_sensor:
  - platform: version
    name: "Battery Indicator ESPHome Version"
  - platform: wifi_info
    ip_address:
      name: "Battery Indicator IP"
    ssid:
      name: "Battery Indicator SSID"
    bssid:
      name: "Battery Indicator BSSID"
    mac_address:
      name: "Battery Indicator Mac Wifi Address"

sensor:
  - platform: uptime
    name: "Battery Indicator Uptime"
  - platform: wifi_signal
    name: "Battery Indicator WiFi Signal"
  - platform: homeassistant
    id: victron_battery_soc
    entity_id: sensor.victron_battery_soc
    internal: true
  - platform: homeassistant
    id: victron_battery_power
    entity_id: sensor.victron_system_battery_power
    internal: true    
    
# set num_leds to the number of leds in the led strip
# set pin to the IO port to control the led strip

light:
  - platform: esp32_rmt_led_strip
    id: batsoclight
    rgb_order: GRB
    pin: GPIO13
    num_leds: 27
    rmt_channel: 0
    chipset: ws2812
    internal: true
    disabled_by_default: true
    default_transition_length: 0s
    effects:
      - addressable_lambda:
          name: "Battery SOC"
          update_interval: 50ms
          lambda: |-
            static int i = 0;
            static int bat_end_i;
            static int power = 0;
            static float soc = 0;
            static int last_update;
            // Anything above this will have the maximum LED speed
            static int power_threshold = 9000;

            static auto red = Color(255,0,0);
            static auto lightred = Color(255/2,0,0);
            static auto orange = Color(155,133,51);
            static auto lightorange = Color(155/2,133/2,51/2);
            static auto green = Color(0,255,0);
            static auto lightgreen = Color(0,255/2,0);
            static auto black = Color(0,0,0);
            static auto color = Color(0,0,0);
            static auto lightcolor = Color(0,0,0);
            
            // power should be negative for discharging
            // and positive for charging
            
            power = id(victron_battery_power).state;
            soc = id(victron_battery_soc).state;

            if (initial_run || !soc ) {    
              it.all() = black;
            } else {
              if (soc >= 60) {
                color = green; 
                lightcolor = lightgreen;
              } else if (soc >= 30) {
                color = orange;
                lightcolor = lightorange;
              } else {
                color = red;
                lightcolor = lightred;
              }

              bat_end_i = int(floor(0.5 + (it.size() - 1) * soc / 100.0));

              it.all() = black;
              it.range(0,bat_end_i+1) = color;
              if (power > 0) 
                it[i] = lightcolor;
              else if (power < 0)
                it[bat_end_i-i] = lightcolor;

              float speed_factor = float(abs(power)) / float(power_threshold);
              if (speed_factor > 1)
                speed_factor = 1;
              // 0...10
              speed_factor = floor((1 - speed_factor)*10 + 0.5);
              // 50ms...500ms
              int update_time = 50 * speed_factor;

              if ((last_update + update_time) < millis() ) {
                last_update = millis();
                i++;
              }
              if (i > bat_end_i)
                i = 0;
            
            } // initial_run